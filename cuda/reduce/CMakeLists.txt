CMAKE_MINIMUM_REQUIRED(VERSION 3.18.5)

PROJECT(reduce CUDA C CXX)

MESSAGE(STATUS "CMAKE_CXX_FLAGS_DEBUG: " ${CMAKE_C_FLAGS_DEBUG})
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELEASE: " ${CMAKE_C_FLAGS_RELEASE})
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO: " ${CMAKE_C_FLAGS_RELWITHDEBINFO})
MESSAGE(STATUS "CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE})

# cuda
FIND_PACKAGE(CUDA REQUIRED)
MESSAGE(STATUS "CUDA_VERSION: ${CUDA_VERSION}")
MESSAGE(STATUS "CUDA_INCLUDE_DIRS: ${CUDA_INCLUDE_DIRS}")
MESSAGE(STATUS "CUDA_LIBRARIES: ${CUDA_LIBRARIES}")
MESSAGE(STATUS "CUDA_CUBLAS_LIBRARIES: ${CUDA_CUBLAS_LIBRARIES}")
SET(CUDA_CUBLASLT_LIBRARIES "/usr/lib/x86_64-linux-gnu/libcublasLt.so")
MESSAGE(STATUS "CUDA_CUBLASLT_LIBRARIES: ${CUDA_CUBLASLT_LIBRARIES}")
INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
SET(CUDA_NVCC_FLAGS "-std=c++14" "-Xcompiler=-fno-gnu-unique")
SET(CMAKE_CUDA_STANDARD 14)

# CUDA targets
IF (DEFINED GPU_ARCHS)
    MESSAGE(STATUS "GPU_ARCHS defined as ${GPU_ARCHS}. Generating CUDA code for SM ${GPU_ARCHS}")
    SEPARATE_ARGUMENTS(GPU_ARCHS)
ELSE ()
    LIST(APPEND GPU_ARCHS
            61
            70
            75
    )
    STRING(REGEX MATCH "aarch64" IS_ARM "${TRT_PLATFORM_ID}")
    IF (IS_ARM)
        # Xavier (SM72) only supported for aarch64.
        LIST(APPEND GPU_ARCHS 72)
    ENDIF ()

    IF (CUDA_VERSION VERSION_GREATER_EQUAL 11.0)
        # Ampere GPU (SM80) support is only available in CUDA versions > 11.0
        LIST(APPEND GPU_ARCHS 80)
    ELSE ()
        message(WARNING "Detected CUDA version is < 11.0. SM80 not supported.")
    ENDIF ()

    MESSAGE(STATUS "GPU_ARCHS is not defined. Generating CUDA code for default SMs: ${GPU_ARCHS}")
ENDIF ()
# Generate SASS for each architecture
FOREACH (arch ${GPU_ARCHS})
    SET(GENCODES "${GENCODES}" "-gencode arch=compute_${arch},code=sm_${arch}")
ENDFOREACH ()
SET(CMAKE_CUDA_ARCHITECTURES ${GPU_ARCHS})
SET(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xcompiler -Wno-deprecated-declarations")
SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS}" "${GENCODES}")
MESSAGE(STATUS "CMAKE_CUDA_ARCHITECTURES: ${CMAKE_CUDA_ARCHITECTURES}")
MESSAGE(STATUS "CMAKE_CUDA_FLAGS: ${CMAKE_CUDA_FLAGS}")
MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")

ADD_EXECUTABLE(reduce_sum reduce_sum.cu cuda_common.h)
SET_TARGET_PROPERTIES(reduce_sum PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
TARGET_LINK_LIBRARIES(reduce_sum ${CUDA_LIBRARIES})

ADD_EXECUTABLE(reduce_max reduce_max.cu cuda_common.h)
SET_TARGET_PROPERTIES(reduce_max PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
TARGET_LINK_LIBRARIES(reduce_max ${CUDA_LIBRARIES})